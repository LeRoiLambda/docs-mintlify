openapi: 3.0.0
info:
  title: Charge API
  version: 1.0.0
  description: >
    The Charge API enables platforms, fleets, and developers to manage EV
    charging sessions, vehicles, drivers, payments, and infrastructure through a
    single unified interface.
servers:
  - url: https://api.chargeapi.co/v1

components:
  schemas:
    account:
      type: object
      description: ''
      properties:
        id:
          type: string
          description: Unique identifier for the account object.
          example: null
        object:
          type: string
          description: String representing the object’s type. Always `account`.
          example: null
        business_type:
          type: string
          nullable: true
          description: >-
            Type of legal entity associated with the account (e.g., individual,
            business).
          example: null
        billing_details:
          type: object
          description: Billing information used for invoicing and reports.
          properties:
            billing_address:
              type: object
              description: Physical address used for billing purposes.
              properties:
                city:
                  type: string
                  example: null
                  description: City, district, suburb, or town.
                country:
                  type: string
                  example: null
                  description: Two-letter ISO country code.
                line1:
                  type: string
                  example: null
                  description: First line of the address.
                line2:
                  type: string
                  example: null
                  description: Second line of the address.
                postal_code:
                  type: string
                  example: null
                  description: ZIP or postal code.
                state:
                  type: string
                  example: null
                  description: State, county, province, or region.
        contact:
          type: object
          description: Primary contact person for the account.
          properties:
            email:
              type: string
              example: null
              description: Contact email address.
            name:
              type: string
              example: null
              description: Full name of the contact person.
            phone:
              type: string
              example: null
              description: Phone number for contact.
        created:
          type: integer
          format: unix-time
          description: Time at which the account was created (UNIX timestamp).
          example: null
        default_currency:
          type: string
          description: >-
            Three-letter ISO currency code for default billing and pricing
            (e.g., `usd`).
          example: null
        description:
          type: string
          nullable: true
          description: Optional internal description or label for the account.
          example: null
        email:
          type: string
          nullable: true
          description: >-
            Email address associated with the account (may duplicate
            contact.email).
          example: null
        metadata:
          type: object
          description: Set of key-value pairs to store custom structured data.
          example: null
        metric_system:
          type: string
          nullable: true
          description: Preferred measurement system. Either `metric` or `imperial`.
          example: null
        name:
          type: string
          nullable: true
          description: Display name or registered name of the account.
          example: null
        plan:
          type: string
          description: >-
            Subscription or feature plan assigned to the fleet (e.g.,
            `professional`).
          example: null
        preferences:
          type: object
          description: Account-level preferences for billing, notifications, and reports.
          properties:
            billing_cycle:
              type: string
              description: Billing cycle preference (`monthly`, `weekly`, etc.).
              example: null
            notifications:
              type: boolean
              description: Whether the account receives charging session notifications.
              example: null
            default_currency:
              type: string
              description: Preferred default currency code.
              example: null
            default_payment_method:
              type: string
              nullable: true
              description: ID of the default payment method used for billing.
              example: null
            reporting_enabled:
              type: boolean
              description: Whether reporting is enabled for the account.
              example: null
            report_frequency:
              type: string
              description: Frequency of scheduled reports (e.g., `weekly`, `monthly`).
              example: null
        registration_number:
          type: string
          nullable: true
          description: Government-issued registration number (for businesses).
          example: null
        type:
          type: string
          description: Type of account, such as `individual` or `business`.
          example: null
        updated:
          type: integer
          format: unix-time
          description: Time at which the account was last updated (UNIX timestamp).
          example: null
        wallet_balance:
          type: integer
          description: >-
            Current account wallet balance in the smallest currency unit (e.g.,
            cents).
          example: null
    error:
      type: object
      description: >
        Standard error wrapper returned by the Charge API when a request fails.
        The `type` field classifies the error category, while `code`
        and `message` provide a stable programmatic identifier and a human-readable
        explanation you can surface to end-users.
      properties:
        object:
          type: string
          description: String representing the object’s type. Always `error`.
          example: error
        type:
          type: string
          description: >
            Broad category of error.
            One of `invalid_request_error`, `authentication_error`,
            `rate_limit_error`, `api_error`, or `idempotency_error`.
          example: invalid_request_error
        message:
          type: string
          description: Human-readable description of the error.
          example: "The fleet ID provided does not exist."
        code:
          type: string
          nullable: true
          description: >
            Stable error code for programmatic handling
            (e.g., `fleet_not_found`, `driver_duplicate`).
          example: fleet_not_found
        param:
          type: string
          nullable: true
          description: Name of the request parameter that caused the error, if applicable.
          example: fleet
        request:
          type: string
          description: >
            Unique identifier for the request. Include this when contacting Charge
            support about a specific error.
          example: req_123abc456def
        status:
          type: integer
          description: HTTP status code returned with the error.
          example: 404
        doc_url:
          type: string
          nullable: true
          format: uri
          description: Link to the relevant section in the Charge API docs.
          example: https://docs.chargeapi.co/errors#fleet_not_found
      required:
        - object
        - type
        - message
        - request
    error_list:
      type: object
      description: Envelope for batch or list operations that can return multiple errors.
      properties:
        object:
          type: string
          enum: [list]
          description: Always `list`.
        data:
          type: array
          items:
            $ref: '#/components/schemas/error'
          description: Array of error objects.
        has_more:
          type: boolean
          description: True if more error pages are available.
        url:
          type: string
          format: uri
          description: Endpoint URL for this error list.
      required: [object, data, has_more, url]
    estimation:
      type: object
      description: ''
      properties:
        id:
          type: string
          description: Unique identifier for the estimation object.
          example: null
        object:
          type: string
          description: String representing the object’s type. Always `estimation`.
          example: null
        battery_level:
          type: integer
          description: >-
            Current battery level of the vehicle before charging, as a
            percentage (0–100).
          example: null
        battery_target_level:
          type: integer
          description: Target battery level for this session, as a percentage (0–100).
          example: null
        cost_breakdown:
          type: array
          description: >-
            Itemized list of costs included in the estimate, such as energy,
            session, and idle fees.
          items:
            type: object
            properties:
              cost:
                type: number
                format: float
                description: Total cost for this line item in currency units.
                example: null
              description:
                type: string
                description: >-
                  Human-readable label for the line item (e.g., “Off-peak energy
                  rate”).
                example: null
              quantity:
                type: number
                nullable: true
                description: >-
                  Quantity of the unit (e.g., energy in kWh, time in minutes),
                  if applicable.
                example: null
              type:
                type: string
                description: >-
                  Type of the cost item (e.g., `energy`, `session_fee`,
                  `idle_fee`).
                example: null
              unit:
                type: string
                nullable: true
                description: Unit of measurement (e.g., `kWh`, `minute`), if applicable.
                example: null
              unit_price:
                type: number
                format: float
                nullable: true
                description: Price per unit for this item (e.g., per kWh), if applicable.
                example: null
              tax_percent:
                type: string
                nullable: true
                description: Optional tax rate or tax label applied to the item.
                example: null
        created:
          type: integer
          format: unix-time
          description: Time at which the estimation was generated.
          example: null
        currency:
          type: string
          description: ISO 4217 three-letter currency code (e.g., `usd`).
          example: null
        estimated_duration:
          type: integer
          description: Estimated charging duration in seconds.
          example: null
        estimated_energy_kwh:
          type: number
          format: float
          description: >-
            Estimated energy needed to reach the target battery level, in
            kilowatt-hours (kWh).
          example: null
        estimated_total_cost:
          type: number
          format: float
          description: Total estimated cost for the session in currency units.
          example: null
        charging_station:
          type: string
          description: ID of the charging station used for this estimation.
          example: null
        valid_until:
          type: integer
          format: unix-time
          description: >-
            Expiration timestamp for this estimate. The values may change after
            this point.
          example: null
        vehicle:
          type: string
          description: ID of the vehicle used for the estimation.
          example: null
    fleet:
      type: object
      description: ''
      properties:
        id:
          type: string
          description: Unique identifier for the fleet object.
          example: null
        object:
          type: string
          description: String representing the object’s type. Always `fleet`.
          example: null
        address:
          type: object
          description: >-
            Physical address associated with the fleet’s headquarters or billing
            location.
          properties:
            city:
              type: string
              description: City, district, or town.
              example: null
            country:
              type: string
              description: Two-letter ISO country code.
              example: null
            line1:
              type: string
              description: First line of the street address.
              example: null
            line2:
              type: string
              description: Second line of the address.
              example: null
            postal_code:
              type: string
              description: ZIP or postal code.
              example: null
            state:
              type: string
              description: State, province, or region.
              example: null
        created:
          type: integer
          format: unix-time
          description: Time at which the fleet was created (UNIX timestamp).
          example: null
        description:
          type: string
          nullable: true
          description: Optional internal description of the fleet.
          example: null
        email:
          type: string
          nullable: true
          description: Contact email associated with the fleet.
          example: null
        metric_system:
          type: string
          enum:
            - international_system
            - us_customary_system
            - imperial_system
          description: Unit system preferred for reports and distance/energy formats.
          example: null
        name:
          type: string
          description: Human-readable name of the fleet.
          example: null
        phone:
          type: string
          nullable: true
          description: Optional phone number associated with the fleet.
          example: null
        preferences:
          type: object
          description: >-
            Account-level settings related to billing, reporting, and charging
            activity.
          properties:
            billing_cycle:
              type: string
              description: Frequency of billing for the fleet (`monthly`, `weekly`, etc.).
              example: null
            notifications:
              type: boolean
              description: >-
                Whether drivers in this fleet receive session status
                notifications.
              example: null
            default_currency:
              type: string
              description: Preferred currency for cost estimates and billing.
              example: null
            default_payment_method:
              type: string
              description: ID of the default payment method to use for charging sessions.
              example: null
            report_frequency:
              type: string
              description: >-
                Frequency of automated report delivery (`weekly`, `monthly`,
                etc.).
              example: null
        status:
          type: string
          enum:
            - active
            - suspended
            - archived
          description: Current operational status of the fleet.
          example: null
        timezone:
          type: string
          description: >-
            IANA timezone identifier used for reporting and scheduling (e.g.,
            `Etc/UTC`).
          example: null
        total_drivers:
          type: integer
          description: Number of drivers currently assigned to this fleet.
          example: null
        total_vehicles:
          type: integer
          description: Number of vehicles currently assigned to this fleet.
          example: null
        total_energy_consumed_kwh:
          type: number
          format: float
          description: >-
            Total historical energy consumed by the fleet across all sessions
            (in kWh).
          example: null
        total_sessions:
          type: integer
          description: Total number of charging sessions completed by the fleet.
          example: null
        updated:
          type: integer
          format: unix-time
          description: Time at which the fleet object was last updated.
          example: null
        wallet_balance:
          type: integer
          description: >-
            Fleet's current wallet or prepaid balance in the smallest currency
            unit (e.g., cents).
          example: null
    driver:
      type: object
      description: ''
      properties:
        id:
          type: string
          description: Unique identifier for the driver object.
          example: null
        object:
          type: string
          description: String representing the object’s type. Always `driver`.
          example: null
        created:
          type: integer
          format: unix-time
          description: Time at which the driver was created (UNIX timestamp).
          example: null
        email:
          type: string
          description: Email address used for login and notifications.
          example: null
        license_number:
          type: string
          nullable: true
          description: Driver’s license number, if applicable.
          example: null
        name:
          type: string
          description: Full name of the driver.
          example: null
        phone:
          type: string
          nullable: true
          description: Optional phone number for communication and account recovery.
          example: null
        preferences:
          type: object
          description: Driver’s personal preferences for charging experience and routing.
          properties:
            charging_speed:
              type: string
              description: Preferred charging speed (e.g., `slow`, `fast`, `ultrafast`).
              example: null
            notifications:
              type: boolean
              description: >-
                Whether to receive notifications about charging status and
                session progress.
              example: null
            currency:
              type: string
              description: Preferred currency for cost display and billing.
              example: null
            payment_method:
              type: string
              nullable: true
              description: Default payment method ID assigned to the driver.
              example: null
            max_price_per_kwh:
              type: number
              nullable: true
              description: >-
                Optional upper limit on acceptable charging price (in currency
                unit per kWh).
              example: null
            preferred_cpos:
              type: array
              items:
                type: string
              description: List of preferred charging network (CPO) IDs.
              example: null
            preferred_charging_stations:
              type: array
              items:
                type: string
              description: List of preferred charging station IDs.
              example: null
        status:
          type: string
          enum:
            - active
            - suspended
            - archived
          description: Current status of the driver account.
          example: null
        updated:
          type: integer
          format: unix-time
          description: Time at which the driver object was last updated.
          example: null
        vehicles:
          type: array
          items:
            type: string
          description: List of vehicle IDs currently linked to the driver.
          example: null
        wallet_balance:
          type: integer
          description: >-
            Driver’s wallet or prepaid balance in the smallest currency unit
            (e.g., cents).
          example: null
    vehicle:
      type: object
      description: ''
      properties:
        id:
          type: string
          description: Unique identifier for the vehicle object.
          example: null
        object:
          type: string
          description: String representing the object’s type. Always `vehicle`.
          example: null
        battery_capacity:
          type: integer
          description: Total battery capacity of the vehicle in watt-hours (Wh).
          example: null
        charging_standard:
          type: string
          description: >-
            Standard used for charging the vehicle (e.g., `CCS`, `CHAdeMO`,
            `Type2`).
          example: null
        created:
          type: integer
          format: unix-time
          description: Time at which the vehicle was registered (UNIX timestamp).
          example: null
        drivers:
          type: array
          items:
            type: string
          description: List of driver IDs currently linked to the vehicle.
          example: null
        information:
          $ref: '#/components/schemas/vehicle_information'
        metadata:
          type: object
          description: >-
            Set of key-value pairs for storing custom structured data about the
            vehicle.
          example: null
        registration_plate:
          type: string
          description: License plate or vehicle registration number.
          example: null
        status:
          type: string
          enum:
            - active
            - inactive
            - retired
          description: Current lifecycle status of the vehicle.
          example: null
        telemetry:
          type: string
          description: ID of the telemetry object linked to this vehicle (if any).
          example: null
        updated:
          type: integer
          format: unix-time
          description: Time at which the vehicle object was last updated.
          example: null
        vin:
          type: string
          description: >-
            Vehicle Identification Number (VIN), used to uniquely identify the
            vehicle.
          example: null
    vehicle_information:
      type: object
      description: Manufacturer details for the vehicle.
      properties:
        make:
          type: string
          description: Vehicle manufacturer or brand (e.g., Tesla, BMW).
        model:
          type: string
          description: Model name of the vehicle.
        year:
          type: string
          description: Model year of the vehicle.
    vehicle_telemetry:
      type: object
      description: ''
      properties:
        id:
          type: string
          description: Unique identifier for the telemetry object.
          example: null
        object:
          type: string
          description: String representing the object’s type. Always `vehicle_telemetry`.
          example: null
        vehicle:
          type: string
          description: ID of the vehicle this telemetry data belongs to.
          example: null
        battery:
          type: object
          description: Battery-level telemetry including state of charge and range.
          properties:
            capacity:
              type: integer
              nullable: true
              description: Battery capacity in watt-hours (Wh).
              example: null
            level:
              type: integer
              description: Battery charge level as a percentage (0–100).
              example: null
            range:
              type: integer
              description: Estimated remaining driving range in meters.
              example: null
            status:
              type: string
              description: Charging status (e.g., `charging`, `not_charging`, `idle`).
              example: null
            temperature:
              type: number
              nullable: true
              description: Measured battery temperature in Celsius.
              example: null
            updated:
              type: integer
              format: unix-time
              description: Time at which the battery telemetry was last updated.
              example: null
        firmware_version:
          type: string
          description: Firmware version currently running on the vehicle.
          example: null
        location:
          type: object
          description: Real-time geographic position of the vehicle.
          properties:
            latitude:
              type: number
              format: float
              description: Latitude component of the GPS position.
              example: null
            longitude:
              type: number
              format: float
              description: Longitude component of the GPS position.
              example: null
            updated:
              type: integer
              format: unix-time
              description: Time at which the location was last updated.
              example: null
        odometer:
          type: object
          description: Most recent odometer reading reported by the vehicle.
          properties:
            unit:
              type: string
              enum:
                - KMS
                - MILES
              description: Unit of measurement for the odometer value.
              example: null
            value:
              type: integer
              description: Total distance driven by the vehicle.
              example: null
            updated:
              type: integer
              format: unix-time
              description: Time at which the odometer was last updated.
              example: null
    charging_station:
      type: object
      description: ''
      properties:
        id:
          type: string
          description: Unique identifier for the charging station object.
          example: null
        object:
          type: string
          description: String representing the object’s type. Always `charging_station`.
          example: null
        address:
          type: object
          description: Physical location of the charging station.
          properties:
            city:
              type: string
              description: City, town, or district where the station is located.
              example: null
            country:
              type: string
              description: Two-letter ISO country code (e.g., `US`, `FR`).
              example: null
            line1:
              type: string
              description: First line of the street address.
              example: null
            line2:
              type: string
              description: Second line of the address.
              example: null
            postal_code:
              type: string
              description: ZIP or postal code.
              example: null
            state:
              type: string
              description: State, province, or administrative region.
              example: null
        availability:
          type: object
          description: Real-time and forecasted availability data for the station.
          properties:
            connectors_total:
              type: integer
              description: Total number of connectors at this station.
              example: null
            connectors_available:
              type: integer
              description: Number of connectors currently available for use.
              example: null
            opening_hours:
              type: array
              description: Weekly operating hours of the station, if not 24/7.
              items:
                type: object
                properties:
                  day:
                    type: string
                    description: Day of the week (e.g., `mon`, `sun`).
                    example: null
                  from:
                    type: string
                    description: Start time in 24h format (e.g., `08:00`).
                    example: null
                  until:
                    type: string
                    description: End time in 24h format (e.g., `20:00`).
                    example: null
            range:
              type: array
              description: >-
                Future time ranges when at least one connector will be
                available.
              items:
                type: object
                properties:
                  from:
                    type: integer
                    format: unix-time
                    description: Start of the availability window.
                    example: null
                  until:
                    type: integer
                    format: unix-time
                    description: End of the availability window.
                    example: null
        capabilities:
          type: object
          description: Capabilities and service features provided at the station.
          properties:
            24_7_access:
              type: boolean
              description: Indicates if the station is accessible 24/7.
              example: null
            amenities:
              type: array
              items:
                type: string
              description: List of amenities offered (e.g., `cafe`, `restrooms`, `wifi`).
              example: null
            payment_methods:
              type: array
              items:
                type: string
              description: Accepted payment methods (e.g., `credit_card`, `rfid`).
              example: null
            requires_membership:
              type: boolean
              description: Whether a membership is required to use this station.
              example: null
            reservable:
              type: boolean
              description: Indicates if the station supports reservations.
              example: null
        connectors:
          type: array
          description: List of connectors available at the station.
          items:
            type: object
            properties:
              id:
                type: string
                description: Unique identifier for the connector.
                example: null
              power:
                type: integer
                description: Maximum power output in kW.
                example: null
              status:
                type: string
                description: >-
                  Current status of the connector (e.g., `available`,
                  `occupied`).
                example: null
              type:
                type: string
                description: Connector type or types supported (e.g., `CHAdeMO`, `CCS`).
                example: null
        created:
          type: integer
          format: unix-time
          description: Time at which the charging station was created.
          example: null
        location:
          type: object
          description: GPS coordinates of the station.
          properties:
            latitude:
              type: number
              format: float
              description: Latitude of the charging station.
              example: null
            longitude:
              type: number
              format: float
              description: Longitude of the charging station.
              example: null
        name:
          type: string
          nullable: true
          description: Optional user-facing name for the station.
          example: null
        operator:
          type: string
          description: Name of the operator (CPO).
          example: null
        operator_contact:
          type: string
          description: Contact information for station support or issues.
          example: null
        pricing:
          type: array
          description: Pricing components applicable at this station.
          items:
            type: object
            properties:
              type:
                type: string
                description: >-
                  Type of price component (e.g., `ENERGY`, `FLAT`,
                  `PARKING_TIME`, `FEE`, `TAX`).
                example: null
              currency:
                type: string
                description: Currency code in ISO 4217 format (e.g., `usd`).
                example: null
              tax:
                type: string
                description: Currency or tax label associated with the component.
                example: null
              price:
                type: integer
                description: Price in the smallest currency unit (e.g., cents).
                example: null
              step_size:
                type: integer
                description: Billing increment step for this price component.
                example: null
        status:
          type: string
          description: >-
            Current status of the station (e.g., `available`, `occupied`,
            `maintenance`).
          example: null
        updated:
          type: integer
          format: unix-time
          description: Time at which the station was last updated.
          example: null
    charging_session:
      type: object
      description: ''
      properties:
        id:
          type: string
          description: Unique identifier for the charging session object.
          example: null
        object:
          type: string
          description: String representing the object’s type. Always `charging_session`.
          example: null
        amount_due:
          type: integer
          description: >-
            Total cost of the charging session, in the smallest currency unit
            (e.g., cents).
          example: null
        amount_paid:
          type: integer
          description: >-
            Amount already paid for the charging session, in the smallest currency unit
            (e.g., cents).
          example: null
        charging_station:
          type: string
          description: ID of the charging station where the session occurred.
          example: null
        connector:
          type: string
          description: ID of the specific connector used during the session.
          example: null
        country:
          type: string
          nullable: true
          description: Country code (ISO 3166-1 alpha-2) where the session took place.
          example: null
        created:
          type: integer
          format: unix-time
          description: Time when the charging session was created or initialized.
          example: null
        currency:
          type: string
          description: ISO 4217 three-letter currency code (e.g., `usd`).
          example: null
        driver:
          type: string
          description: ID of the driver who initiated the session.
          example: null
        energy_consumed:
          type: integer
          description: Amount of energy delivered during the session, in watt-hours (Wh).
          example: null
        fleet:
          type: string
          description: ID of the fleet the driver or session is associated with.
          example: null
        payment_method:
          type: string
          description: ID of the payment method used to pay for the session.
          example: null
        session_ended:
          type: integer
          format: unix-time
          nullable: true
          description: Time at which the charging session ended, if completed.
          example: null
        session_started:
          type: integer
          format: unix-time
          description: Time when the session began and charging started.
          example: null
        status:
          type: string
          enum:
            - active
            - completed
            - cancelled
            - failed
          description: Current status of the session.
          example: null
        updated:
          type: integer
          format: unix-time
          description: Time at which the session was last updated.
          example: null
        vehicle:
          type: string
          description: ID of the vehicle's driver who initiated the session.
          example: null
    transaction:
      type: object
      description: ''
      properties:
        id:
          type: string
          description: Unique identifier for the transaction object.
          example: null
        object:
          type: string
          description: String representing the object’s type. Always `transaction`.
          example: null
        amount:
          type: integer
          description: >-
            Total amount of the transaction in the smallest currency unit (e.g.,
            cents).
          example: null
        charging_session:
          type: string
          description: ID of the charging session associated with this transaction.
          example: null
        created:
          type: integer
          format: unix-time
          description: Time at which the transaction was created.
          example: null
        currency:
          type: string
          description: ISO 4217 currency code used for this transaction (e.g., `usd`).
          example: null
        description:
          type: string
          nullable: true
          description: Optional human-readable description of the transaction.
          example: null
        driver:
          type: string
          description: ID of the driver associated with the transaction.
          example: null
        payment_method:
          type: string
          description: ID of the payment method used for the transaction.
          example: null
        status:
          type: string
          enum:
            - succeeded
            - failed
            - pending
          description: Current status of the transaction.
          example: null
        type:
          type: string
          enum:
            - charge
            - refund
            - adjustment
          description: Type of financial event recorded (e.g., `charge`, `refund`).
          example: null
        vehicle:
          type: string
          description: ID of the vehicle linked to the transaction.
          example: null
    invoice:
      type: object
      description: ''
      properties:
        id:
          type: string
          description: Unique identifier for the invoice object.
          example: null
        object:
          type: string
          description: String representing the object’s type. Always `invoice`.
          example: null
        amount_due:
          type: integer
          nullable: true
          description: >-
            Total amount due on the invoice, in the smallest currency unit
            (e.g., cents).
          example: null
        amount_paid:
          type: integer
          nullable: true
          description: Total amount paid toward the invoice.
          example: null
        created:
          type: integer
          format: unix-time
          description: Time at which the invoice was created.
          example: null
        currency:
          type: string
          description: ISO 4217 three-letter currency code (e.g., `usd`).
          example: null
        due_date:
          type: integer
          format: unix-time
          nullable: true
          description: Timestamp when the invoice is due.
          example: null
        line_items:
          type: array
          nullable: true
          description: Array of individual line items included in the invoice.
          items:
            type: object
          example: null
        paid_at:
          type: integer
          format: unix-time
          nullable: true
          description: Timestamp when the invoice was fully paid, if applicable.
          example: null
        period_end:
          type: integer
          format: unix-time
          nullable: true
          description: End of the billing period this invoice covers.
          example: null
        period_start:
          type: integer
          format: unix-time
          nullable: true
          description: Start of the billing period this invoice covers.
          example: null
        status:
          type: string
          nullable: true
          enum:
            - draft
            - open
            - paid
            - overdue
            - void
          description: Current status of the invoice.
          example: null
    report:
      type: object
      description: ''
      properties:
        id:
          type: string
          description: Unique identifier for the report object.
          example: null
        object:
          type: string
          description: String representing the object’s type. Always `reporting`.
          example: null
        account:
          type: string
          description: ID of the account associated with this report.
          example: null
        created:
          type: integer
          format: unix-time
          description: Time at which the report was created.
          example: null
        fleet:
          type: string
          description: ID of the fleet that this report is scoped to, if applicable.
          example: null
        parameters:
          type: object
          description: Parameters used to generate the report.
          properties:
            filters:
              type: object
              description: Filters applied when generating the report.
              properties:
                vehicle:
                  type: array
                  items:
                    type: string
                  description: List of vehicle IDs included in the report filter.
                  example: null
            group_by:
              type: string
              description: >-
                Field used to group data in the report (e.g., `vehicle`,
                `driver`).
              example: null
            period_start:
              type: integer
              format: unix-time
              description: Start of the reporting period (inclusive).
              example: null
            period_end:
              type: integer
              format: unix-time
              description: End of the reporting period (inclusive).
              example: null
            type:
              type: string
              description: Report type or template used (e.g., `charging_summary`).
              example: null
        size:
          type: integer
          description: Size of the generated report file in bytes.
          example: null
        status:
          type: string
          enum:
            - pending
            - processing
            - succeeded
            - failed
          description: Current status of the report generation process.
          example: null
        succeeded_at:
          type: integer
          format: unix-time
          description: Timestamp when the report generation was completed successfully.
          example: null
        type:
          type: string
          description: File format of the generated report (e.g., `csv`, `pdf`).
          example: null
        url:
          type: string
          format: uri
          description: Public URL to download the generated report file.
          example: null
    reservation:
      description: >
        The Reservation object represents a driver's intent to charge their  vehicle within a specific time window (`ideal_start`/`ideal_end`) and geographic area (`location`).

        Initially, a reservation is in a **pending** state. Charge automatically attempts to assign an available charging station and confirm the reservation approximately 30 minutes before the desired start time. If successful, the reservation status updates to **confirmed**, locking a connector at the assigned charging station.

        If no suitable charging station is available, the reservation status changes to **failed** with a `failed_reason`. Once charging successfully occurs, the reservation status becomes **completed**. Reservations can also be **cancelled** by the driver or automatically **expired** if unused.
      properties:
        id:
          type: string
          description: Unique identifier for the reservation.
        object:
          type: string
          enum: [reservation]
          description: String representing the object's type. Always `reservation`.
        cancellation_policy:
          type: object
          description: Defines conditions for reservation cancellation.
          properties:
            free_until_before:
              type: integer
              description: Time in seconds before reservation start when cancellation is free.
            type:
              type: string
              enum: [free_cancellation, non_refundable]
          required: [type]
        charging_station:
          type: string
          nullable: true
          description: ID of assigned charging station (populated once confirmed).
        confirmed_at:
          type: integer
          format: unix-time
          nullable: true
          description: Timestamp when reservation status changed to `confirmed`.
        connector_type:
          type: array
          description: Acceptable connector types for charging.
          items:
            type: string
        created:
          type: integer
          format: unix-time
          description: Timestamp when reservation was created.
        currency:
          type: string
          description: ISO currency code for the reservation fee (e.g., `usd`).
        driver:
          type: string
          description: ID of the driver associated with the reservation.
        earliest_start:
          type: integer
          format: unix-time
          nullable: true
          description: Earliest acceptable reservation start time.
        failed_reason:
          type: string
          nullable: true
          enum:
            - no_available_connectors
            - payment_failed
            - other
          description: Reason why reservation failed, if applicable.
        ideal_end:
          type: integer
          format: unix-time
          description: Ideal reservation end time (requested by driver).
        ideal_start:
          type: integer
          format: unix-time
          description: Ideal reservation start time (requested by driver).
        latest_end:
          type: integer
          format: unix-time
          nullable: true
          description: Latest acceptable reservation end time.
        location:
          type: object
          description: Geographic area where reservation is requested.
          properties:
            latitude:
              type: number
            longitude:
              type: number
            radius:
              type: integer
              description: Radius around the location in meters.
          required: [latitude, longitude, radius]
        metadata:
          type: object
          description: Custom metadata (key-value pairs).
          additionalProperties: true
        payment_method:
          type: string
          description: ID of the payment method used for the reservation fee.
        reservation_fee:
          type: integer
          description: Reservation fee amount in smallest currency unit (e.g., cents).
        reserved_end:
          type: integer
          format: unix-time
          nullable: true
          description: Finalized end time after confirmation.
        reserved_start:
          type: integer
          format: unix-time
          nullable: true
          description: Finalized start time after confirmation.
        status:
          type: string
          enum:
            - pending
            - confirmed
            - completed
            - cancelled
            - failed
            - expired
          description: >
            Current status of the reservation.

            - `pending`: Created intent, awaiting confirmation.

            - `confirmed`: Connector reserved successfully.

            - `completed`: Charging session occurred successfully.

            - `cancelled`: Cancelled by driver before start.

            - `failed`: Unable to assign a connector.

            - `expired`: Reservation window passed without use.
        updated:
          type: integer
          format: unix-time
          description: Timestamp when reservation was last updated.
        vehicle:
          type: string
          description: ID of the vehicle associated with the reservation.
      required:
        - created
        - id
        - ideal_end
        - ideal_start
        - object
        - status
        - updated
      title: Reservation
      type: object
    payment_method:
      type: object
      description: ''
      properties:
        id:
          type: string
          description: Unique identifier for the payment method object.
          example: null
        object:
          type: string
          description: String representing the object’s type. Always `payment_method`.
          example: null
        billing_details:
          type: object
          description: Billing contact information associated with the payment method.
          properties:
            address:
              type: object
              description: Billing address of the payment method holder.
              properties:
                city:
                  type: string
                  description: City, town, or district.
                  example: null
                country:
                  type: string
                  description: ISO 3166-1 alpha-2 country code (e.g., `US`).
                  example: null
                line1:
                  type: string
                  description: First line of the street address.
                  example: null
                line2:
                  type: string
                  description: Second line of the address.
                  example: null
                postal_code:
                  type: string
                  description: ZIP or postal code.
                  example: null
                state:
                  type: string
                  description: State, province, or administrative region.
                  example: null
            email:
              type: string
              description: Email address linked to the billing profile.
              example: null
            name:
              type: string
              description: Full name of the billing contact.
              example: null
            phone:
              type: string
              description: Phone number associated with the payment method.
              example: null
        created:
          type: integer
          format: unix-time
          description: Time at which the payment method was added.
          example: null
        details:
          type: object
          description: Card or method-specific details (non-sensitive).
          properties:
            brand:
              type: string
              description: Brand of the card (e.g., `visa`, `mastercard`).
              example: null
            last4:
              type: string
              description: Last four digits of the card number.
              example: null
            exp_month:
              type: integer
              description: Card expiration month (1–12).
              example: null
            exp_year:
              type: integer
              description: Card expiration year.
              example: null
        driver:
          type: string
          nullable: true
          description: ID of the driver this payment method is associated with, if any.
          example: null
        fleet:
          type: string
          nullable: true
          description: ID of the fleet this payment method is associated with, if any.
          example: null
        type:
          type: string
          description: Type of payment method (e.g., `card`, `wallet`).
          example: null
    webhook_endpoint:
      type: object
      description: ''
      properties:
        id:
          type: string
          description: Unique identifier for the webhook endpoint object.
          example: null
        object:
          type: string
          description: >-
            String representing the object’s type. Always
            `webhook_endpoint`.
          example: null
        api_version:
          type: string
          nullable: true
          description: >-
            API version this webhook endpoint is configured to receive. Defaults
            to the account's version if `null`.
          example: null
        application:
          type: string
          nullable: true
          description: ID of the application associated with this webhook, if applicable.
          example: null
        created:
          type: integer
          format: unix-time
          description: Time at which the webhook endpoint was created.
          example: null
        description:
          type: string
          nullable: true
          description: An optional description for the webhook endpoint.
          example: null
        enabled_events:
          type: array
          description: List of event types that will trigger this webhook endpoint.
          items:
            type: string
            example: null
        livemode:
          type: boolean
          description: >-
            Indicates whether this webhook endpoint is operating in live or test
            mode.
          example: null
        metadata:
          type: object
          description: >-
            Set of key-value pairs for attaching custom structured data to the
            webhook endpoint.
          example: null
        secret:
          type: string
          description: Secret used to sign webhook payloads sent to this endpoint.
          example: null
        status:
          type: string
          enum:
            - enabled
            - disabled
          description: Current status of the webhook endpoint.
          example: null
        url:
          type: string
          format: uri
          description: The URL that will receive the webhook POST requests.
          example: null

paths:
  /accounts:
    post:
      description: >
        Creates a new Account object.  
        An account is the top-level container for all other resources
        (vehicles, drivers, stations, etc.).  
        Use this endpoint to onboard a fleet, platform integration,
        or business entity into Charge.
      operationId: postAccounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  description: Display name of the account.
                email:
                  type: string
                  description: Primary contact email.
                type:
                  type: string
                  enum: [individual, business]
                  description: Legal entity type.
                default_currency:
                  type: string
                  description: ISO-4217 currency code (e.g., `usd`).
                metric_system:
                  type: string
                  enum: [metric, imperial]
                  description: Preferred measurement system.
                plan:
                  type: string
                  description: Subscription plan (e.g., `professional`).
                preferences:
                  $ref: '#/components/schemas/account/properties/preferences'
                metadata:
                  type: object
                  description: Custom key-value pairs for integration needs.
              required:
                - name
                - email
                - type
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/account'
          description: Returns the newly created Account object.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: Create an account
  /accounts/{account}:
    get:
      description: >
        Retrieves the full Account object by its unique ID.  
        The response includes core profile data, billing preferences, plan
        details, and any custom metadata stored on the account.
      operationId: getAccountsAccount
      parameters:
        - in: path
          name: account
          required: true
          schema:
            type: string
          description: ID of the account to retrieve.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies related objects to expand in the response
            (e.g., `expand[]=billing_details`).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/account'
          description: 	Returns the Account object for a valid identifier. Raises an error otherwise.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account not found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: Retrieve an account
    post:
      description: >
        Updates the specified Account object by setting the values of the
        parameters provided. Parameters omitted from the request remain
        unchanged.
      operationId: postAccountsAccount
      parameters:
        - in: path
          name: account
          required: true
          schema:
            type: string
          description: ID of the account to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  description: New display name for the account.
                email:
                  type: string
                  description: Updated contact email.
                description:
                  type: string
                  description: Internal description or note.
                metric_system:
                  type: string
                  enum: [metric, imperial]
                  description: Updated measurement system preference.
                plan:
                  type: string
                  description: Change the subscription plan.
                preferences:
                  $ref: '#/components/schemas/account/properties/preferences'
                metadata:
                  type: object
                  description: Merge or replace custom key-value pairs.
                status:
                  type: string
                  enum: [active, suspended, archived]
                  description: Set operational status for the account.
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/account'
          description: Returns the updated Account object reflecting the supplied changes.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Account not found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: Update an account
  /charging_sessions:
    post:
      description: >
        Starts a new Charging Session on a specific connector.  
        The session remains **active** until it is explicitly ended or the
        charging station stops delivering power.  
        A successful response returns the live session object, including a
        `status` of `active`, the start timestamp, and an authorization
        reference if applicable.
      operationId: postChargingSessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                charging_station:
                  type: string
                  description: ID of the station where charging will occur.
                connector:
                  type: string
                  description: ID of the specific connector to activate.
                driver:
                  type: string
                  description: ID of the driver starting the session.
                vehicle:
                  type: string
                  description: ID of the vehicle being charged.
                payment_method:
                  type: string
                  description: >
                    ID of the payment method to authorize and bill for this
                    session.
                session_limit:
                  type: integer
                  description: >
                    Optional energy limit in watt-hours to auto-stop charging
                    when reached.
              required:
                - charging_station
                - connector
                - driver
                - vehicle
                - payment_method
      responses:
        '200':
          description: Charging session successfully initiated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/charging_session'
        '402':
          description: Payment authorization failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Station, connector, driver, or vehicle not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '409':
          description: Connector already in use or session conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      summary: Initiate a charging session
  /charging_sessions/{charging_session}:
    get:
      description: >
        Retrieves the Charging Session object by its unique ID.  
        The response includes real-time status if the session is still active,
        or final cost and energy metrics if it has been completed.
      operationId: getChargingSessionsChargingSession
      parameters:
        - in: path
          name: charging_session
          required: true
          schema:
            type: string
          description: ID of the charging session to retrieve.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies related objects to expand (e.g., `expand[]=charging_station`).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: Charging session successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/charging_session'
        '404':
          description: Session not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      summary: Retrieve a charging session
  /charging_sessions/{charging_session}/end:
    post:
      description: >
        Stops power delivery, closes the active Charging Session, and finalizes
        billing.  
        When the session is successfully ended, the response contains the
        completed session object with `status` set to `completed`, the
        `session_ended` timestamp, the final `energy_consumed`, and the
        `amount_due`.
      operationId: postChargingSessionsChargingSessionEnd
      parameters:
        - in: path
          name: charging_session
          required: true
          schema:
            type: string
          description: ID of the charging session to end.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                reason:
                  type: string
                  enum: [driver_request, vehicle_full, station_error, idle_timeout]
                  description: Optional reason why the session was terminated.
                meter:
                  type: integer
                  description: >
                    Optional final meter reading in watt-hours, if provided by
                    the station for reconciliation.
      responses:
        '200':
          description: Charging session successfully completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/charging_session'
        '404':
          description: Session not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '409':
          description: Session is already completed or not active.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      summary: Complete a charging session
  /charging_stations:
    get:
      description: >
        Returns a paginated list of Charging Station objects, sorted by creation
        date with the most recently added stations first.  
        You can filter the results by geographic location and radius, vehicle compatibility,
        availability, proximity, driver favorites, or route-based parameters.
      operationId: getChargingStations
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      parameters:
        - in: query
          name: available
          required: false
          schema:
            type: boolean
          description: >
            If true, only stations with at least one currently available connector are returned.
        - in: query
          name: destination
          required: false
          schema:
            type: string
            pattern: '^-?\d+(\.\d+)?,-?\d+(\.\d+)?$'
          description: >
            Destination coordinates `lat,lng` for route-based station recommendations. Requires `origin`.
        - in: query
          name: driver
          required: false
          schema:
            type: string
          description: >
            Returns only stations marked as favorites by the specified driver.
        - in: query
          name: ending_before
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns stations before this ID.
        - in: query
          name: latitude
          required: false
          schema:
            type: number
            format: float
          description: Latitude for geographic filtering. Requires `longitude` and `radius`.
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of stations to return (default 10).
        - in: query
          name: longitude
          required: false
          schema:
            type: number
            format: float
          description: Longitude for geographic filtering. Requires `latitude` and `radius`.
        - in: query
          name: max_detour
          required: false
          schema:
            type: number
            format: float
          description: Maximum allowable detour from route in kilometers (default 10 km).
        - in: query
          name: origin
          required: false
          schema:
            type: string
            pattern: '^-?\d+(\.\d+)?,-?\d+(\.\d+)?$'
          description: >
            Origin coordinates `lat,lng` for route-based station recommendations. Requires `destination`.
        - in: query
          name: starting_after
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns stations after this ID.
        - in: query
          name: radius
          required: false
          schema:
            type: integer
            minimum: 100
            maximum: 10000
          description: >
            Search radius around the provided latitude and longitude.
        - in: query
          name: vehicle
          required: false
          schema:
            type: string
          description: >
            Filters stations compatible with the vehicle’s connector type and power requirements.
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  object:
                    description: >-
                      String representing the object's type. Objects of the same
                      type share the same value. Always has the value `list`.
                    enum: [list]
                    type: string
                  url:
                    description: Endpoint URL for this list.
                    type: string
                  has_more:
                    description: True if more pages are available.
                    type: boolean
                  data:
                    items:
                      description: ''
                      $ref: '#/components/schemas/charging_station'
                    type: array
                required: [data, has_more, object, url]
                type: object
          description: A dictionary with a data property that contains an array of up to limit charging stations, starting after charging station starting_after. Each entry in the array is a separate Charging Station object. If no more charging stations are available, the resulting array will be empty.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: List charging stations
  /charging_stations/{charging_station}:
    get:
      description: >
        Retrieves a single Charging Station object by its unique ID.  
        The response includes address, connectors, live availability, pricing,
        and operator metadata.
      operationId: getChargingStationsChargingStation
      parameters:
        - in: path
          name: charging_station
          required: true
          schema:
            type: string
          description: ID of the charging station to retrieve.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/charging_station'
          description: Returns the Charging Station object for a valid identifier. Raises an error otherwise.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Charging station not found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: Retrieve a charging station
  /drivers:
    get:
      description: >
        Returns a paginated list of Driver objects, ordered by creation date
        with the most recent drivers first.
      operationId: getDrivers
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of drivers to return (default 10).
        - in: query
          name: starting_after
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns records after this driver ID.
        - in: query
          name: ending_before
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns records before this driver ID.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies which fields in each driver object to expand.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    enum: [list]
                    description: Always `list`.
                  data:
                    type: array
                    items:
                      description: ''
                      $ref: '#/components/schemas/driver'
                    description: Array of Driver objects.
                  has_more:
                    type: boolean
                    description: True if additional pages are available.
                  url:
                    type: string
                    description: Endpoint URL for this list.
                required: [object, data, has_more, url]
          description: A dictionary with a data property that contains an array of up to limit Driver objects, starting after Driver starting_after. Each entry in data is a separate Driver object. If no additional drivers are available, the array is empty.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: List drivers
    post:
      description: >
        Creates a new Driver object.  
        Drivers store personal, licensing, and notification preferences so you
        can track who is responsible for vehicle usage and charging sessions.
      operationId: postDrivers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  description: Full name of the driver.
                email:
                  type: string
                  description: Contact email address.
                phone:
                  type: string
                  description: Optional phone number.
                license_number:
                  type: string
                  description: Driver’s license or certification number.
                preferences:
                  $ref: '#/components/schemas/driver/properties/preferences'
                metadata:
                  type: object
                  description: Custom key-value pairs for integration needs.
              required:
                - name
                - email
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/driver'
          description: Returns the newly created Driver object.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: Create a driver
  /drivers/{driver}:
    delete:
      description: >
        Permanently deletes a Driver object and removes its association with all
        vehicles and sessions.  
        This action can’t be undone, but historical session data remains for
        reporting.
      operationId: deleteDriversDriver
      parameters:
        - in: path
          name: driver
          required: true
          schema:
            type: string
          description: ID of the driver to delete.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the deleted driver
                  object:
                    type: string
                    enum: [driver]
                    description: Always `driver`
                  deleted:
                    type: boolean
                    description: Always `true`
                required: [id, object, deleted]
          description: Returns the deleted Driver object, including a deleted property set to true.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Driver not found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: Delete a driver
    get:
      description: >
        Fetches a Driver object by its unique ID.  
        Use this endpoint to obtain contact details, preferences, vehicle
        links, and wallet balance for a specific driver.
      operationId: getDriversDriver
      parameters:
        - in: path
          name: driver
          required: true
          schema:
            type: string
          description: ID of the driver to retrieve.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies related objects to expand in the response
            (e.g., `expand[]=vehicles`).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/driver'
          description: Returns the Driver object for a valid identifier. Raises an error otherwise..
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Driver not found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: Retrieve a driver
    post:
      description: >
        Updates the specified Driver object by setting the values of the
        parameters provided.  
        Any parameters not included in the request remain unchanged.
      operationId: postDriversDriver
      parameters:
        - in: path
          name: driver
          required: true
          schema:
            type: string
          description: ID of the driver to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  description: Updated full name.
                email:
                  type: string
                  description: Updated contact email.
                phone:
                  type: string
                  description: Updated phone number.
                license_number:
                  type: string
                  description: Driver’s license number to store or update.
                status:
                  type: string
                  enum: [active, suspended, archived]
                  description: Set driver status.
                preferences:
                  $ref: '#/components/schemas/driver/properties/preferences'
                metadata:
                  type: object
                  description: Merge or replace custom key-value metadata pairs.
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/driver'
          description: Returns the updated Driver object with all requested changes applied..
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Driver not found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: Update a driver
  /drivers/{driver}/attach:
    post:
      description: >
        Links an existing Vehicle to the specified Driver.  
        After the call succeeds, the vehicle appears in the driver’s `vehicles`
        array and future charging sessions will attribute the driver.
      operationId: postDriversDriverAttach
      parameters:
        - in: path
          name: driver
          required: true
          schema:
            type: string
          description: ID of the driver who will operate the vehicle.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                vehicle:
                  type: string
                  description: ID of the vehicle to attach.
              required: [vehicle]
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/driver'
          description: Returns the Driver object now containing the attached vehicle in its vehicles array.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Driver or vehicle not found.
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Vehicle already attached to the driver.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: Attach a driver to a vehicle
  /drivers/{driver}/charging_sessions:
    get:
      description: >
        Returns a paginated list of ChargingSession objects associated with the
        specified driver, ordered by `session_started` in descending order.
      operationId: getDriversDriverChargingSessions
      parameters:
        - in: path
          name: driver
          required: true
          schema:
            type: string
          description: ID of the driver whose sessions you want to list.
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum: [active, completed, cancelled, failed]
          description: Filter sessions by status.
        - in: query
          name: created
          required: false
          schema:
            anyOf:
              - type: integer
              - type: object
                properties:
                  gt:
                    type: integer
                    description: Minimum timestamp (exclusive)
                  gte:
                    type: integer
                    description: Minimum timestamp (inclusive)
                  lt:
                    type: integer
                    description: Maximum timestamp (exclusive)
                  lte:
                    type: integer
                    description: Maximum timestamp (inclusive)
          description: >
            A range filter on the `created` timestamp.
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of sessions to return (default 10).
        - in: query
          name: starting_after
          required: false
          schema:
            type: string
          description: Pagination cursor; returns sessions after this ID.
        - in: query
          name: ending_before
          required: false
          schema:
            type: string
          description: Pagination cursor; returns sessions before this ID.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies fields to expand in each session object (e.g.,
            `expand[]=charging_station`).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: Successful response with driver session list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    enum: [list]
                    description: Always `list`
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/charging_session'
                    description: Driver’s sessions
                  has_more:
                    type: boolean
                    description: True if additional pages are available
                  url:
                    type: string
                    description: Endpoint URL
                required: [object, data, has_more, url]
        '404':
          description: Driver not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      summary: List driver’s charging sessions
  /drivers/{driver}/detach:
    post:
      description: >
        Removes the association between the specified Vehicle and Driver.
        After detachment, the vehicle will no longer appear in the driver’s
        `vehicles` list and future sessions won’t automatically attribute the
        driver.
      operationId: postDriversDriverDetach
      parameters:
        - in: path
          name: driver
          required: true
          schema:
            type: string
          description: ID of the driver to detach from.
        - in: path
          name: vehicle
          required: true
          schema:
            type: string
          description: ID of the vehicle to detach.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/driver'
          description: Returns the Driver object with the specified vehicle removed from its vehicles array.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Driver or vehicle not found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: Detach a driver from a vehicle
  /drivers/{driver}/transactions:
    get:
      summary: List driver’s transactions
      operationId: getDriversDriverTransactions
      description: >
        Returns a paginated list of Transaction objects that belong to the
        specified driver, sorted by creation date with the most recent
        transactions first.
      parameters:
        - in: path
          name: driver
          required: true
          schema:
            type: string
          description: ID of the driver whose transactions you want to list.
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of transactions to return (default 10).
        - in: query
          name: starting_after
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns items after this transaction ID.
        - in: query
          name: ending_before
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns items before this transaction ID.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies related objects to expand in each transaction
            (for example, `expand[]=charging_session`).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: A dictionary with a data property that contains an array of up to limit Transaction objects for the specified driver, starting after Transaction starting_after. Each entry in data is a separate Transaction object. If no additional transactions are available, the array is empty.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    enum: [list]
                    description: Always `list`.
                  url:
                    type: string
                    description: Endpoint URL for this list.
                  has_more:
                    type: boolean
                    description: True if additional pages are available.
                  data:
                    type: array
                    description: Array of Transaction objects.
                    items:
                      $ref: '#/components/schemas/transaction'
                required: [object, url, data]
        '404':
          description: Driver not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /drivers/{driver}/vehicles:
    get:
      description: >
        Returns a paginated list of Vehicle objects that are currently attached
        to the specified driver.
      operationId: getDriversDriverVehicles
      parameters:
        - in: path
          name: driver
          required: true
          schema:
            type: string
          description: ID of the driver whose vehicles you want to list.
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of vehicles to return (default 10).
        - in: query
          name: starting_after
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns vehicles after this ID.
        - in: query
          name: ending_before
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns vehicles before this ID.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    enum: [list]
                    description: Always `list`.
                  url:
                    type: string
                    description: Endpoint URL for this list.
                  has_more:
                    type: boolean
                    description: True if additional pages are available.
                  data:
                    type: array
                    description: Array of Vehicle objects attached to the driver.
                    items:
                      $ref: '#/components/schemas/vehicle'
                required: [object, data, has_more, url]
          description: A dictionary with a data property that contains an array of up to limit Driver objects attached to the vehicle, starting after Driver starting_after. Each entry in data is a separate Driver object. If no additional drivers are available, the array is empty.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Driver not found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: List driver’s vehicles
  /estimations:
    post:
      description: >
        Generates a real-time cost estimate for a potential charging session.
        Clients provide the proposed charging goal (current SoC → target SoC)
        plus the station and vehicle context. The response breaks down expected
        energy, duration, and pricing components so drivers know what to expect
        before they plug in.
      operationId: postEstimations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                charging_station:
                  type: string
                  description: ID of the charging station being evaluated.
                vehicle:
                  type: string
                  description: ID of the vehicle to use for battery capacity and connector checks.
                soc_current:
                  type: integer
                  minimum: 0
                  maximum: 100
                  description: Current state-of-charge (percentage) of the vehicle battery.
                soc_target:
                  type: integer
                  minimum: 1
                  maximum: 100
                  description: Desired target state-of-charge after charging completes.
                currency:
                  type: string
                  description: >
                    Optional ISO 4217 currency code to override station default
                    (e.g., `usd`). If omitted, uses station’s currency.
              required:
                - charging_station
                - vehicle
                - soc_current
                - soc_target
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/estimation'
          description: Returns the newly created Estimation object containing the cost breakdown and duration prediction for the requested parameters.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Validation error (e.g., incompatible connector, invalid SoC range).
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: Create a cost estimation
  /estimations/{estimation}:
    get:
      description: >
        Retrieves a previously generated Estimation object by its unique ID.  
        Use this endpoint to confirm pricing details or to display the estimate
        again without recalculating.
      operationId: getEstimationsEstimation
      parameters:
        - in: path
          name: estimation
          required: true
          schema:
            type: string
          description: ID of the estimation to retrieve.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies related objects to expand (e.g., `expand[]=charging_station`).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/estimation'
          description: Returns the Estimation object for a valid identifier. Raises an error if the estimation has expired or the ID is invalid.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Estimation not found or expired.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: Retrieve an estimation
  /fleets:
    post:
      description: >
        Creates a new Fleet object under the authenticated Account.  
        Use fleets to group vehicles and drivers by region, depot, or business
        unit, and to apply common billing and reporting preferences.
      operationId: postFleets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                email:
                  type: string
                  description: Optional contact email for fleet notifications.
                timezone:
                  type: string
                  description: IANA timezone (e.g., `Europe/Paris`).
                metric_system:
                  type: string
                  enum: [international_system, us_customary_system, imperial_system]
                  description: Preferred unit system for reports.
                name:
                  type: string
                  description: Human-readable name for the fleet.
                preferences:
                  $ref: '#/components/schemas/fleet/properties/preferences'
                metadata:
                  type: object
                  description: Custom key-value pairs for integration needs.
              required:
                - name
      responses:
        '200':
          description: Fleet successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fleet'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      summary: Create a fleet
  /fleets/{fleet}:
    delete:
      description: >
        Permanently deletes a fleet and disassociates all linked drivers and
        vehicles. This action **cannot be undone**.  
        Any historical sessions and reports remain accessible for compliance
        but the fleet itself will no longer appear in list endpoints.
      operationId: deleteFleetsFleet
      parameters:
        - in: path
          name: fleet
          required: true
          schema:
            type: string
          description: ID of the fleet to delete.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: Fleet successfully deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the deleted fleet.
                  object:
                    type: string
                    enum: [fleet]
                    description: Always `fleet`.
                  deleted:
                    type: boolean
                    description: Always `true` for a successful deletion.
                required: [id, object, deleted]
        '404':
          description: Fleet not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      summary: Delete a fleet
    get:
      description: >
        Retrieves the full Fleet object by its unique ID.  
        Use this endpoint to obtain current status, aggregated metrics,
        and preferences for a specific fleet.
      operationId: getFleetsFleet
      parameters:
        - in: path
          name: fleet
          required: true
          schema:
            type: string
          description: ID of the fleet to retrieve.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies which related objects to expand in the response
            (e.g., `expand[]=address`).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: Fleet successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fleet'
        '404':
          description: Fleet not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      summary: Retrieve a fleet
    post:
      description: >
        Updates the specified Fleet by setting the values of the parameters
        passed. Any parameters not provided remain unchanged.
      operationId: postFleetsFleet
      parameters:
        - in: path
          name: fleet
          required: true
          schema:
            type: string
          description: ID of the fleet to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                  description: New display name for the fleet.
                email:
                  type: string
                  description: Updated contact email for the fleet.
                timezone:
                  type: string
                  description: Updated IANA timezone identifier.
                metric_system:
                  type: string
                  enum: [international_system, us_customary_system, imperial_system]
                  description: Updated preferred unit system.
                preferences:
                  $ref: '#/components/schemas/fleet/properties/preferences'
                status:
                  type: string
                  enum: [active, suspended, archived]
                  description: Set the operational status of the fleet.
                metadata:
                  type: object
                  description: Replace or augment custom key-value metadata pairs.
      responses:
        '200':
          description: Fleet successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fleet'
        '404':
          description: Fleet not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      summary: Update a fleet
  /fleets/{fleet}/charging_sessions:
    get:
      description: >
        Returns a paginated list of ChargingSession objects for every driver
        and vehicle in the specified fleet. Results are ordered by
        `session_started` (newest first) and can be filtered by status or date
        range.
      operationId: getFleetsFleetChargingSessions
      parameters:
        - in: path
          name: fleet
          required: true
          schema:
            type: string
          description: ID of the fleet to query.
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum: [active, completed, cancelled, failed]
          description: Filter sessions by status.
        - in: query
          name: created
          required: false
          schema:
            anyOf:
              - type: integer
              - type: object
                properties:
                  gt:
                    type: integer
                    description: Minimum timestamp (exclusive)
                  gte:
                    type: integer
                    description: Minimum timestamp (inclusive)
                  lt:
                    type: integer
                    description: Maximum timestamp (exclusive)
                  lte:
                    type: integer
                    description: Maximum timestamp (inclusive)
          description: Range filter on `created` timestamp.
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of sessions to return (default 10).
        - in: query
          name: starting_after
          schema:
            type: string
          description: Pagination cursor; returns sessions after this ID.
        - in: query
          name: ending_before
          schema:
            type: string
          description: Pagination cursor; returns sessions before this ID.
        - in: query
          name: expand
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
          description: Fields to expand in each session object.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: Successful response with fleet session list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    enum: [list]
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/charging_session'
                  has_more:
                    type: boolean
                  url:
                    type: string
                required: [object, data, has_more, url]
        '404':
          description: Fleet not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      summary: List fleet’s charging sessions
  /fleets/{fleet}/drivers:
    get:
      description: >
        Returns a paginated list of Driver objects that are currently associated
        with the specified fleet.
      operationId: getFleetsFleetDrivers
      parameters:
        - in: path
          name: fleet
          required: true
          schema:
            type: string
          description: ID of the fleet to retrieve drivers for.
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of drivers to return (default 10).
        - in: query
          name: starting_after
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns drivers after this ID.
        - in: query
          name: ending_before
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns drivers before this ID.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: Successful response with driver list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    enum: [list]
                    description: Always `list`.
                  data:
                    type: array
                    description: Array of Driver objects.
                    items:
                      $ref: '#/components/schemas/driver'
                  has_more:
                    type: boolean
                    description: True if more pages are available.
                  url:
                    type: string
                    description: Endpoint URL for this list.
                required: [object, data, has_more, url]
        '404':
          description: Fleet not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      summary: List fleet’s drivers
  /fleets/{fleet}/drivers/{driver}:
    post:
      description: >
        Links an existing Driver to the specified Fleet.  
        After the call succeeds, the driver appears in the fleet’s driver list
        and inherits any fleet-level preferences or billing settings.
      operationId: postFleetsFleetDriversDriver
      parameters:
        - in: path
          name: fleet
          required: true
          schema:
            type: string
          description: ID of the fleet that will receive the driver.
        - in: path
          name: driver
          required: true
          schema:
            type: string
          description: ID of the driver to add.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: Driver successfully added to fleet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/driver'
        '404':
          description: Fleet or driver not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '409':
          description: Driver already belongs to the fleet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      summary: Attach a driver to a fleet
    get:
      summary: List fleet’s vehicles
      operationId: getFleetsFleetVehicles
      description: >
        Returns a paginated list of Vehicle objects linked to the specified
        fleet. Use query parameters to page through large fleets.
      parameters:
        - in: path
          name: fleet
          required: true
          schema:
            type: string
          description: ID of the fleet to retrieve vehicles for.
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of vehicles to return (default 10).
        - in: query
          name: starting_after
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns vehicles after this ID.
        - in: query
          name: ending_before
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns vehicles before this ID.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: Successful response with vehicle list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    enum: [list]
                    description: Always `list`.
                  data:
                    type: array
                    description: Array of Vehicle objects.
                    items:
                      $ref: '#/components/schemas/vehicle'
                  has_more:
                    type: boolean
                    description: True if additional pages are available.
                  url:
                    type: string
                    description: Endpoint URL for this list.
                required: [object, data, has_more, url]
        '404':
          description: Fleet not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /fleets/{fleet}/invoices:
    get:
      summary: List fleet’s invoices
      operationId: getFleetsFleetInvoices
      description: >
        Returns a paginated list of Invoice objects generated for the specified
        fleet, sorted by creation date with the most recent invoices first.
      parameters:
        - in: path
          name: fleet
          required: true
          schema:
            type: string
          description: ID of the fleet whose invoices you want to list.
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of invoices to return (default 10).
        - in: query
          name: starting_after
          required: false
          schema:
            type: string
          description: Pagination cursor; returns items after this invoice ID.
        - in: query
          name: ending_before
          required: false
          schema:
            type: string
          description: Pagination cursor; returns items before this invoice ID.
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum: [draft, open, paid, void, uncollectible]
          description: Filter results by invoice status.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies related objects to expand in each invoice
            (for example, `expand[]=line_items`).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: A dictionary with a data property that contains an array of up to limit Invoice objects belonging to the specified fleet, starting after Invoice starting_after. Each entry in data is a separate Invoice object. If no additional invoices are available, the array is empty.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    description: Always `list`.
                    enum: [list]
                    type: string
                  url:
                    description: Endpoint URL for this list.
                    type: string
                  has_more:
                    description: True if additional pages are available.
                    type: boolean
                  data:
                    description: Array of Invoice objects.
                    items:
                      $ref: '#/components/schemas/invoice'
                    type: array
                required: [object, url, has_more, data]
        '404':
          description: Fleet not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /fleets/{fleet}/transactions:
    get:
      summary: List fleet’s transactions
      operationId: getFleetsFleetTransactions
      description: >
        Returns a paginated list of Transaction objects that belong to any
        driver or vehicle within the specified fleet, sorted by creation date
        with the most recent transactions first.
      parameters:
        - in: path
          name: fleet
          required: true
          schema:
            type: string
          description: ID of the fleet whose transactions you want to list.
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of transactions to return (default 10).
        - in: query
          name: starting_after
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns items after this transaction ID.
        - in: query
          name: ending_before
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns items before this transaction ID.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies related objects to expand in each transaction
            (for example, `expand[]=charging_session`).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: A dictionary with a data property that contains an array of up to limit Transaction objects for the specified fleet, starting after Transaction starting_after. Each entry in data is a separate Transaction object. If no additional transactions are available, the array is empty.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    enum: [list]
                    description: Always `list`.
                  url:
                    type: string
                    description: Endpoint URL for this list.
                  has_more:
                    type: boolean
                    description: True if additional pages are available.
                  data:
                    type: array
                    description: Array of Transaction objects.
                    items:
                      $ref: '#/components/schemas/transaction'
                required: [object, url, has_more, data]
        '404':
          description: Fleet not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /fleets/{fleet}/vehicles/{vehicle}:
    post:
      description: >
        Associates an existing Vehicle with the specified Fleet.  
        Once added, the vehicle will appear in the fleet’s vehicle list and
        its charging sessions will be aggregated under fleet reports.
      operationId: postFleetsFleetVehiclesVehicle
      parameters:
        - in: path
          name: fleet
          required: true
          schema:
            type: string
          description: ID of the fleet that will receive the vehicle.
        - in: path
          name: vehicle
          required: true
          schema:
            type: string
          description: ID of the vehicle to add.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: Vehicle successfully added to fleet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vehicle'
        '404':
          description: Fleet or vehicle not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '409':
          description: Vehicle already belongs to the fleet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      summary: Add a vehicle to a fleet
  /invoices:
    get:
      summary: List invoices
      operationId: getInvoices
      description: >
        Returns a paginated list of Invoice objects for the authenticated
        account, sorted by creation date with the most recent invoices first.
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of invoices to return (default 10).
        - in: query
          name: starting_after
          required: false
          schema:
            type: string
          description: Pagination cursor; returns items after this invoice ID.
        - in: query
          name: ending_before
          required: false
          schema:
            type: string
          description: Pagination cursor; returns items before this invoice ID.
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum: [draft, open, paid, void, uncollectible]
          description: Filter results by invoice status.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies related objects to expand in each invoice
            (for example, `expand[]=line_items`).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: A dictionary with a data property that contains an array of up to limit Invoice objects, starting after Invoice starting_after. Each entry in data is a separate Invoice object. If no additional invoices are available, the array is empty.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    description: Always `list`.
                    enum: [list]
                    type: string
                  url:
                    description: Endpoint URL for this list.
                    type: string
                  has_more:
                    description: True if additional pages are available.
                    type: boolean
                  data:
                    description: Array of Invoice objects.
                    items:
                      $ref: '#/components/schemas/invoice'
                    type: array
                required: [object, url, has_more, data]
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      summary: Create an invoice
      operationId: postInvoices
      description: >
        Generates a draft invoice that groups all transactions within a time
        window (and, optionally, for a single fleet).  
        Use the **Finalize an invoice** endpoint to lock line-items and make the
        invoice ready for payment.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                period_start:
                  type: integer
                  format: unix-time
                  description: Start of the billing window (inclusive).
                period_end:
                  type: integer
                  format: unix-time
                  description: End of the billing window (exclusive).
                fleet:
                  type: string
                  description: >
                    (Optional) Limit the invoice to a single fleet under the
                    account.
                description:
                  type: string
                  description: Optional memo that appears on the invoice.
                currency:
                  type: string
                  description: >
                    ISO-4217 currency code (defaults to the account’s
                    `default_currency`).
              required:
                - period_start
                - period_end
              example:
                period_start: 1711929600
                period_end:   1714608000
      responses:
        '200':
          description: Returns the newly created Invoice object with status set to draft. Line items are generated from the transactions in the requested period, but the invoice isn’t payable until you finalize it.
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/invoice'
        '400':
          description: Validation error (for example, period dates reversed).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /invoices/{invoice}:
    get:
      summary: Retrieve an invoice
      operationId: getInvoicesInvoice
      description: >
        Fetches a single Invoice object by its unique ID.  
        The response includes line-items, totals, status, and payment details.
      parameters:
        - in: path
          name: invoice
          required: true
          schema:
            type: string
          description: ID of the invoice to retrieve.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies related objects to expand (for example, `expand[]=line_items`).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: Returns the Invoice object for a valid identifier. If the invoice is in draft state, totals might change until it’s finalized. Raises an error otherwise.
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/invoice'
        '404':
          description: Invoice not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      description: >
        Updates the specified Invoice object by setting the values of the
        parameters provided.  
        Only invoices in the `draft` or `open` state can be updated.
      operationId: postInvoicesInvoice
      parameters:
        - in: path
          name: invoice
          required: true
          schema:
            type: string
          description: ID of the invoice to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                description:
                  type: string
                  description: Human-readable memo that appears on the invoice.
                due_date:
                  type: integer
                  format: unix-time
                  description: Override the default due date (UNIX timestamp).
                metadata:
                  type: object
                  description: Set of key–value pairs for internal reference.
              example:
                description: "April 2024 fleet invoice"
      responses:
        '200':
          description: Returns the updated Invoice object reflecting the supplied changes. Raises an error if the invoice ID is invalid or the invoice is no longer editable (for example, already finalized).
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/invoice'
        '400':
          description: Update not allowed (for example, invoice already finalized).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Invoice not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      summary: Update an invoice
  /invoices/{invoice}/finalize:
    post:
      summary: Finalize an invoice
      operationId: postInvoicesInvoiceFinalize
      description: >
        Locks the invoice’s line items, calculates taxes and totals, and changes
        `status` from `draft` to `open`, making the invoice ready for payment.
      parameters:
        - in: path
          name: invoice
          required: true
          schema:
            type: string
          description: ID of the draft invoice to finalize.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: Returns the Invoice object with status updated to open, line-items locked, and amount_due computed. Raises an error if the invoice is already finalized, void, or paid.
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/invoice'
        '400':
          description: Unable to finalize (for example, invoice already finalized or void).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Invoice not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /invoices/{invoice}/pay:
    post:
      summary: Pay an invoice
      operationId: postInvoicesInvoicePay
      description: >
        Collects payment for an open invoice using the account’s default payment
        method (or the `payment_method` you supply).  
        On success, the invoice’s `status` becomes `paid` and `amount_due` is
        set to zero.
      parameters:
        - in: path
          name: invoice
          required: true
          schema:
            type: string
          description: ID of the open invoice to pay.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                payment_method:
                  type: string
                  description: >
                    Override the default payment method with a
                    specific Payment Method ID.
              example:
                payment_method: "pm_1Nv9F6IJvEtkwdCNYmOCc123"
      responses:
        '200':
          description: Returns the Invoice object with status updated to paid, amount_paid populated, and paid_at set to the payment timestamp. Raises an error if the invoice is already paid, void, or no default payment method is available.
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/invoice'
        '400':
          description: Payment failed (for example, card declined or invoice already paid).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Invoice not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /invoices/{invoice}/void:
    post:
      summary: Void an invoice
      operationId: postInvoicesInvoiceVoid
      description: >
        Permanently cancels an open or uncollectible invoice.  
        Once voided, the invoice can’t be paid or edited.
      parameters:
        - in: path
          name: invoice
          required: true
          schema:
            type: string
          description: ID of the invoice you want to void.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: Returns the Invoice object with status updated to void. Voiding an invoice makes it non-payable and unrecoverable for further updates or payments. Raises an error if the invoice is already paid, void, or draft.
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/invoice'
        '400':
          description: Unable to void (for example, invoice already paid or draft).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Invoice not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /payment_methods:
    get:
      summary: List payment methods
      operationId: getPaymentMethods
      description: >
        Returns a paginated list of Payment Method objects for the authenticated
        account, sorted by creation date with the most recent methods first.
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of payment methods to return (default 10).
        - in: query
          name: starting_after
          required: false
          schema:
            type: string
          description: Pagination cursor; returns items after this payment-method ID.
        - in: query
          name: ending_before
          required: false
          schema:
            type: string
          description: Pagination cursor; returns items before this payment-method ID.
        - in: query
          name: type
          required: false
          schema:
            type: string
            enum: [card]
          description: Filter results by payment-method type.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies related objects to expand in each payment method
            (for example, `expand[]=driver` or `expand[]=fleet`).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    enum: [list]
                    description: Always `list`.
                  data:
                    type: array
                    description: Array of Payment Method objects.
                    items:
                      description: ''
                      $ref: '#/components/schemas/payment_method'
                  has_more:
                    type: boolean
                    description: True if additional pages are available.
                  url:
                    type: string
                    description: Endpoint URL for this list.
                required: [object, data, has_more, url]
          description: 'A dictionary with a data property that contains an array of up to limit Payment Method objects, starting after Payment Method starting_after. Each entry in data is a separate Payment Method object. If no additional payment methods are available, the array is empty.'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      summary: Create a Payment Method
      operationId: postPaymentMethods
      description: >
        Creates a new Payment Method object (for example, a credit card). You can later attach
        this method to a driver or fleet for charging session payments or invoices.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                type:
                  type: string
                  enum: [card]
                  description: The type of payment method (currently only `card` is supported).
                details:
                  type: object
                  description: Card details for the payment method.
                  properties:
                    number:
                      type: string
                      description: Card number.
                    exp_month:
                      type: integer
                      description: Card expiration month (1–12).
                    exp_year:
                      type: integer
                      description: Card expiration year (four digits).
                    cvc:
                      type: string
                      description: Card verification code.
                  required: [number, exp_month, exp_year, cvc]
                billing_details:
                  type: object
                  description: Billing details for the cardholder.
                  properties:
                    name:
                      type: string
                      description: Cardholder's name.
                    address:
                      type: object
                      description: Billing address.
                      properties:
                        line1:
                          type: string
                        city:
                          type: string
                        state:
                          type: string
                        postal_code:
                          type: string
                        country:
                          type: string
              required: [type, details]
              example:
                type: "card"
                details:
                  number: "4242424242424242"
                  exp_month: 12
                  exp_year: 2027
                  cvc: "123"
                billing_details:
                  name: "John Doe"
                  address:
                    line1: "123 Elm Street"
                    city: "Springfield"
                    state: "IL"
                    postal_code: "62704"
                    country: "US"
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment_method'
          description: 'Returns the newly created Payment Method object.'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Validation error (for example, invalid card details).
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
  /payment_methods/{payment_method}:
    delete:
      summary: Delete a Payment Method
      operationId: deletePaymentMethodsPaymentMethod
      description: >
        Permanently removes a payment method from Charge.  
        This action detaches the token from any drivers or fleets and makes the
        method unavailable for future payments.
      parameters:
        - in: path
          name: payment_method
          required: true
          schema:
            type: string
          description: ID of the payment method to delete.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the deleted payment method.
                  object:
                    type: string
                    enum: [payment_method]
                    description: Always `payment_method`.
                  deleted:
                    type: boolean
                    description: Always `true`.
                required: [id, object, deleted]
          description: Returns the deleted Payment Method object, including a deleted property set to true.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Payment method not found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
    get:
      summary: Retrieve a Payment Method
      operationId: getPaymentMethodsPaymentMethod
      description: >
        Retrieves a single Payment Method object by its unique ID.  
        The response includes masked card details, billing information, and any
        current driver or fleet attachment.
      parameters:
        - in: path
          name: payment_method
          required: true
          schema:
            type: string
          description: ID of the payment method to retrieve.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies related objects to expand (for example, `expand[]=driver`).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment_method'
          description: 'Returns the Payment Method object for a valid identifier. Raises an error otherwise.'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Payment method not found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
  /transactions:
    get:
      summary: List transaction history
      operationId: getTransactions
      description: >
        Returns a paginated list of Transaction objects for your account,
        sorted by creation date with the most recent transactions first.
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of transactions to return (default 10).
        - in: query
          name: starting_after
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns items after this transaction ID.
        - in: query
          name: ending_before
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns items before this transaction ID.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies related objects to expand in the response
            (for example, `expand[]=charging_session`).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: Returns a dictionary with a data property that contains an array of up to limit Transaction objects, starting after Transaction starting_after. Each entry in data is a separate Transaction object. If no additional transactions are available, the array is empty.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    enum: [list]
                    description: Always `list`.
                  url:
                    type: string
                    description: Endpoint URL for this list.
                  has_more:
                    type: boolean
                    description: True if additional pages are available.
                  data:
                    type: array
                    description: Array of Transaction objects.
                    items:
                      $ref: '#/components/schemas/transaction'
                required: [object, url, has_more, data]
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /transactions/{transaction}:
    get:
      summary: Retrieve transaction details
      operationId: getTransactionsTransaction
      description: >
        Retrieves a Transaction object by its unique ID.  
        The response includes amount, currency, payment method, session link,
        and status metadata.
      parameters:
        - in: path
          name: transaction
          required: true
          schema:
            type: string
          description: ID of the transaction to retrieve.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies related objects to expand in the response
            (for example, `expand[]=charging_session`).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: Returns the Transaction object for a valid identifier. Raises an error otherwise.
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/transaction'
        '404':
          description: Transaction not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /vehicles:
    post:
      description: >
        Creates a new Vehicle object.  
        Vehicles represent EVs in the Charge platform and are used to track
        state-of-charge, telemetry, and charging sessions across stations.
      operationId: postVehicles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                vin:
                  type: string
                  description: Vehicle Identification Number (VIN).
                battery_capacity:
                  type: integer
                  description: Battery capacity in watt-hours (Wh).
                charging_standard:
                  type: string
                  enum: [CCS, CHAdeMO, Type2]
                  description: Primary charging standard supported.
                information:
                  $ref: '#/components/schemas/vehicle_information'
                registration_plate:
                  type: string
                  description: License-plate / registration number.
                metadata:
                  type: object
                  description: Custom key-value pairs (color, nickname, etc.).
              required:
                - vin
                - battery_capacity
                - charging_standard
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/vehicle'
          description: Returns the newly created Vehicle object.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: Create a vehicle
  /vehicles/{vehicle}:
    delete:
      description: >
        Permanently deletes a Vehicle object and removes all driver links.  
        Historical charging sessions remain available for reporting, but the
        vehicle will no longer appear in list endpoints.
      operationId: deleteVehiclesVehicle
      parameters:
        - in: path
          name: vehicle
          required: true
          schema:
            type: string
          description: ID of the vehicle to delete.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the deleted vehicle
                  object:
                    type: string
                    enum: [vehicle]
                    description: Always `vehicle`
                  deleted:
                    type: boolean
                    description: Always `true`
                required: [id, object, deleted]
          description: Returns the deleted Vehicle object, including a deleted property set to true.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Vehicle not found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: Delete a vehicle
    get:
      description: >
        Retrieves a Vehicle object by its unique ID.  
        The response includes core specs, registration info, telemetry link,
        and any drivers currently associated with the vehicle.
      operationId: getVehiclesVehicle
      parameters:
        - in: path
          name: vehicle
          required: true
          schema:
            type: string
          description: ID of the vehicle to retrieve.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies related objects to expand (e.g., `expand[]=drivers`).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/vehicle'
          description: Returns the Vehicle object for a valid identifier. Raises an error otherwise.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Vehicle not found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: Retrieve a vehicle
    post:
      description: >
        Updates the specified Vehicle object by setting the values of the
        parameters provided. Any parameters not included remain unchanged.
      operationId: postVehiclesVehicle
      parameters:
        - in: path
          name: vehicle
          required: true
          schema:
            type: string
          description: ID of the vehicle to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                battery_capacity:
                  type: integer
                  description: Updated battery capacity in Wh.
                charging_standard:
                  type: string
                  enum: [CCS, CHAdeMO, Type2]
                  description: Change the primary charging standard.
                information:
                  $ref: '#/components/schemas/vehicle_information'
                registration_plate:
                  type: string
                  description: Update license-plate / registration number.
                status:
                  type: string
                  enum: [active, inactive, retired]
                  description: Set lifecycle status of the vehicle.
                metadata:
                  type: object
                  description: Merge or replace custom key-value metadata.
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/vehicle'
          description: Returns the updated Vehicle object with any supplied changes applied.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Vehicle not found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: Update a vehicle
  /vehicles/{vehicle}/charging_sessions:
    get:
      description: >
        Returns a paginated list of ChargingSession objects associated with the
        specified vehicle, ordered by `session_started` (most recent first).
      operationId: getVehiclesVehicleChargingSessions
      parameters:
        - in: path
          name: vehicle
          required: true
          schema:
            type: string
          description: ID of the vehicle whose sessions you want to list.
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum: [active, completed, cancelled, failed]
          description: Filter sessions by current status.
        - in: query
          name: created
          required: false
          schema:
            anyOf:
              - type: integer
              - type: object
                properties:
                  gt:
                    type: integer
                    description: Minimum timestamp (exclusive)
                  gte:
                    type: integer
                    description: Minimum timestamp (inclusive)
                  lt:
                    type: integer
                    description: Maximum timestamp (exclusive)
                  lte:
                    type: integer
                    description: Maximum timestamp (inclusive)
          description: >
            Range filter on the `created` timestamp.
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of sessions to return (default 10).
        - in: query
          name: starting_after
          required: false
          schema:
            type: string
          description: Pagination cursor; returns sessions after this ID.
        - in: query
          name: ending_before
          required: false
          schema:
            type: string
          description: Pagination cursor; returns sessions before this ID.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Fields to expand in each session object (e.g.,
            `expand[]=charging_station`).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: Vehicle sessions successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    enum: [list]
                    description: Always `list`.
                  data:
                    type: array
                    description: Array of ChargingSession objects for this vehicle.
                    items:
                      $ref: '#/components/schemas/charging_session'
                  has_more:
                    type: boolean
                    description: True if additional pages are available.
                  url:
                    type: string
                    description: Endpoint URL for this list.
                required: [object, data, has_more, url]
        '404':
          description: Vehicle not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      summary: List vehicle’s charging sessions
  /vehicles/{vehicle}/drivers:
    get:
      description: >
        Returns a paginated list of Driver objects currently linked to the
        specified vehicle.
      operationId: getVehiclesVehicleIdDrivers
      parameters:
        - in: path
          name: vehicle
          required: true
          schema:
            type: string
          description: ID of the vehicle whose drivers you want to list.
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of drivers to return (default 10).
        - in: query
          name: starting_after
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns drivers after this ID.
        - in: query
          name: ending_before
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns drivers before this ID.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    enum: [list]
                    description: Always `list`.
                  url:
                    type: string
                    description: Endpoint URL for this list.
                  has_more:
                    type: boolean
                    description: True if additional pages are available.
                  data:
                    type: array
                    description: Array of Driver objects attached to the vehicle.
                    items:
                      description: ''
                      $ref: '#/components/schemas/driver'
                required: [object, data, has_more, url]
          description: A dictionary with a data property that contains an array of up to limit Vehicle objects attached to the driver, starting after Vehicle starting_after. Each entry in data is a separate Vehicle object. If no additional vehicles are available, the array is empty.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Vehicle not found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: List vehicle’s drivers
    post:
      description: >
        Links an existing Driver to the specified Vehicle.  
        Once attached, the driver will appear in the vehicle’s `drivers` array
        and future charging sessions will attribute the driver.
      operationId: postVehiclesVehicleDriversAttach
      parameters:
        - in: path
          name: vehicle
          required: true
          schema:
            type: string
          description: ID of the vehicle that the driver will operate.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                driver:
                  type: string
                  description: ID of the driver to attach.
              required: [driver]
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/vehicle'
          description: Returns the Vehicle object now containing the attached driver in its drivers array.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Vehicle or driver not found.
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Driver already attached to the vehicle.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: Attach a vehicle to a driver
  /vehicles/{vehicle}/drivers/{driver}/detach:
    post:
      description: >
        Removes the association between the specified Driver and Vehicle.  
        After the detachment, the driver will no longer appear in the vehicle’s
        `drivers` list and future sessions won’t automatically attribute the
        driver to this vehicle.
      operationId: postVehiclesVehicleDriversDriverDetach
      parameters:
        - in: path
          name: vehicle
          required: true
          schema:
            type: string
          description: ID of the vehicle to detach from.
        - in: path
          name: driver
          required: true
          schema:
            type: string
          description: ID of the driver to detach.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/vehicle'
          description: Returns the Vehicle object with the specified driver removed from its drivers array.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Vehicle or driver not found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
      summary: Detach a vehicle from a driver
  /vehicles/{vehicle}/telemetry:
    get:
      summary: Get real-time telemetry
      operationId: getVehiclesVehicleTelemetry
      description: >
        Retrieves the most recent Vehicle Telemetry object for the specified
        vehicle.  
        Telemetry includes battery state-of-charge, estimated range, GPS
        coordinates, odometer, and other runtime data points.
      parameters:
        - in: path
          name: vehicle
          required: true
          schema:
            type: string
          description: ID of the vehicle whose telemetry you want to fetch.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies fields to expand (e.g., `expand[]=battery`).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/vehicle_telemetry'
          description: 	Returns the latest Vehicle Telemetry object for the specified vehicle. Raises an error if no telemetry is available.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Vehicle or telemetry not found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Error response.
  /reports:
    get:
      summary: List all past reports
      operationId: getReports
      description: >
        Returns a paginated list of Report objects you've previously generated,
        sorted by creation date with the most recent reports first.
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of reports to return (default 10).
        - in: query
          name: starting_after
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns items after this report ID.
        - in: query
          name: ending_before
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns items before this report ID.
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum: [pending, succeeded, failed]
          description: Filter results by report status.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies related objects to expand in each report (for example,
            `expand[]=fleet`).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: A dictionary with a data property that contains an array of up to limit Report objects, starting after Report starting_after. Each entry in data is a separate Report object. If no additional reports are available, the array is empty.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    enum: [list]
                    description: Always `list`.
                  url:
                    type: string
                    description: Endpoint URL for this list.
                  has_more:
                    type: boolean
                    description: True if additional pages are available.
                  data:
                    type: array
                    description: Array of Report objects.
                    items:
                      $ref: '#/components/schemas/report'
                required: [object, url, has_more, data]
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      summary: Create a report generation request
      operationId: postReports
      description: >
        Generates an aggregated analytics report such as a charging-summary or
        cost-analysis, based on the parameters you supply.  
        Report generation is asynchronous: the request immediately returns a
        Report object with `status=pending`. Poll the **Retrieve a report**
        endpoint, or listen for the `report.succeeded` webhook, to know when
        the file is ready for download.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                parameters:
                  type: object
                  description: Report configuration payload.
                  properties:
                    type:
                      type: string
                      enum:
                        - charging_summary
                        - cost_analysis
                        - usage_breakdown
                        - fleet_efficiency
                      description: Kind of report to generate.
                    period_start:
                      type: integer
                      format: unix-time
                      description: Start of the reporting window (inclusive).
                    period_end:
                      type: integer
                      format: unix-time
                      description: End of the reporting window (exclusive).
                    group_by:
                      type: string
                      enum: [vehicle, driver, fleet, station]
                      description: Dimension to group rows by.
                    filters:
                      type: object
                      description: Optional filters (vehicle IDs, driver IDs, etc.).
                  required:
                    - type
                    - period_start
                    - period_end
                fleet:
                  type: string
                  description: >
                    Limit the report to a single fleet. Omit to aggregate across
                    the entire account.
              example:
                parameters:
                  type: "charging_summary"
                  period_start: 1711929600
                  period_end:   1714608000
                fleet: "fleet_12345"
      responses:
        '200':
          description: Returns the newly created Report object. The report’s status is set to pending until generation completes. Use the status field (or the succeeded_at timestamp) to track when the report is ready.
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/report'
        '400':
          description: Validation error (for example, `period_end` before `period_start`).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /reports/{report}:
    get:
      summary: Retrieve a report
      operationId: getReportsReport
      description: >
        Fetches a Report object by its unique ID.  
        Use the `status` field to determine whether the report is ready:
        `pending`, `succeeded`, or `failed`.  
        When `status=succeeded`, the `url` property points to the CSV or JSON
        file, and `size` gives the file size in bytes.
      parameters:
        - in: path
          name: report
          required: true
          schema:
            type: string
          description: ID of the report to retrieve.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies related objects to expand (for example, `expand[]=fleet`).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: Returns the Report object for a valid identifier. If the report is still being generated, its status field is pending and url is null. When generation succeeds, status becomes succeeded, succeeded_at is populated, and url contains a downloadable link. Raises an error otherwise.
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/report'
        '404':
          description: Report not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /reservations:
    get:
      summary: List reservations
      operationId: getReservations
      description: >
        Returns a paginated list of Reservation objects, sorted by creation date
        with the most recent reservations first. You can filter by status,
        driver, or vehicle.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of reservations to return (default 10).
        - in: query
          name: starting_after
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns items after this reservation ID.
        - in: query
          name: ending_before
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns items before this reservation ID.
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum: [pending, confirmed, completed, cancelled, failed, expired]
          description: Filter results by reservation status.
        - in: query
          name: driver
          required: false
          schema:
            type: string
          description: Filter by driver ID.
        - in: query
          name: vehicle
          required: false
          schema:
            type: string
          description: Filter by vehicle ID.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies related objects to expand in each reservation
            (for example, `expand[]=charging_station`).
      responses:
        '200':
          description: 'A dictionary with a data property that contains an array of up to limit Reservation objects, starting after Reservation starting_after. Each entry in data is a separate Reservation object. If no additional reservations are available, the array is empty.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    enum: [list]
                    description: Always `list`.
                  data:
                    type: array
                    description: Array of Reservation objects.
                    items:
                      description: ''
                      $ref: '#/components/schemas/reservation'
                  has_more:
                    type: boolean
                    description: True if additional pages are available.
                  url:
                    type: string
                    description: Endpoint URL for this list.
                required: [object, data, has_more, url]
        default:
          description: Error response.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/error' }
    post:
      description: >
        Creates a virtual reservation that captures the driver’s preferred
        charging window, location, and connector requirements.  
        The reservation starts in a `pending` state. About 30 minutes before
        `ideal_start`, Charge will attempt to assign a compatible charging
        station and update the reservation to `confirmed` or `failed`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - vehicle
                - driver
                - connector_type
                - location
                - ideal_start
                - ideal_end
              properties:
                vehicle:  { type: string, description: Vehicle ID. }
                driver:   { type: string, description: Driver ID. }
                connector_type:
                  type: array
                  minItems: 1
                  items: { type: string, enum: [CHAdeMO, CCS, Type2] }
                location:
                  type: object
                  required: [latitude, longitude, radius]
                  properties:
                    latitude:  { type: number, format: double }
                    longitude: { type: number, format: double }
                    radius:    { type: integer, description: Radius in metres. }
                ideal_start:
                  type: integer
                  format: unix-time
                ideal_end:
                  type: integer
                  format: unix-time
                earliest_start:
                  type: integer
                  format: unix-time
                  nullable: true
                latest_end:
                  type: integer
                  format: unix-time
                  nullable: true
                payment_method:
                  type: string
                  nullable: true
                metadata:
                  type: object
                  additionalProperties: { type: string }
            example:
              vehicle: "veh_789xyz"
              driver:  "drv_789xyz"
              connector_type: ["CCS"]
              location:
                latitude: 64.7254
                longitude: 12.3356
                radius: 2000
              ideal_start: 1711929600
              ideal_end:   1711933200
      responses:
        '200':
          description: 'Returns the newly created Reservation object with status set to pending. No station is locked yet; Charge will attempt to confirm the reservation closer to the requested window.'
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/reservation'
        '400':
          description: Validation error (for example, end before start).
          content:
            application/json:
              schema: { $ref: '#/components/schemas/error' }
        default:
          description: Error response.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/error' }
      operationId: postReservations
      summary: Create a reservation
  /reservations/{reservation}:
    get:
      summary: Retrieve a reservation
      operationId: getReservationsReservation
      description: >
        Retrieves the details of an existing Reservation object.  
        The response reflects the reservation’s current status, `pending`,
        `confirmed`, `failed`, and so on and includes any station assignment
        data if the reservation has been confirmed.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      parameters:
        - in: path
          name: reservation
          required: true
          schema: { type: string }
          description: ID of the reservation to retrieve.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items: { type: string }
          description: >
            Specifies related objects to expand
            (for example, `expand[]=charging_station`).
      responses:
        '200':
          description: 'Returns the Reservation object for a valid identifier. If the reservation was deleted or never existed, an error is raised.'
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/reservation'
        '404':
          description: Reservation not found.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/error' }
        default:
          description: Error response.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/error' }
    post:
      summary: Update a reservation
      operationId: postReservationsReservation
      description: >
        Modifies an existing reservation *intent* before it is confirmed.  
        You can adjust the preferred time window, location radius, connector
        types, or payment method. Once the reservation is confirmed (or has
        otherwise left the `pending` state) these fields become read-only.
      parameters:
        - in: path
          name: reservation
          required: true
          schema: { type: string }
          description: ID of the reservation to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                ideal_start:    { type: integer, format: unix-time }
                ideal_end:      { type: integer, format: unix-time }
                earliest_start: { type: integer, format: unix-time, nullable: true }
                latest_end:     { type: integer, format: unix-time, nullable: true }
                location:
                  type: object
                  properties:
                    latitude:  { type: number, format: double }
                    longitude: { type: number, format: double }
                    radius:    { type: integer }
                connector_type:
                  type: array
                  minItems: 1
                  items: { type: string, enum: [CHAdeMO, CCS, Type2] }
                payment_method:
                  type: string
                  nullable: true
                metadata:
                  type: object
                  additionalProperties: { type: string }
              example:
                ideal_start: 1711927800
                ideal_end:   1711931400
                location:
                  radius: 2500
      responses:
        '200':
          description: >
            Returns the updated Reservation object reflecting the supplied changes.
            Updates are only allowed while the reservation is in the pending state. Attempts to modify a reservation that is confirmed, failed, cancelled, or expired return an error.
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/reservation'
        '400':
          description: >
            Update not allowed (for example, reservation no longer in `pending`
            state, or invalid time range).
          content:
            application/json:
              schema: { $ref: '#/components/schemas/error' }
        '404':
          description: Reservation not found.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/error' }
        default:
          description: Error response.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/error' }
  /reservations/{reservation}/cancel:
    post:
      summary: Cancel a reservation
      operationId: postReservationsReservationCancel
      description: 'Cancels a reservation intent or a **confirmed** reservation. If the cancellation occurs before `cancellation_policy.free_until_before` seconds prior to `ideal_start`, any reservation fee is waived. If the reservation is already **confirmed**, the connector lock is released immediately.'
      parameters:
        - in: path
          name: reservation
          required: true
          schema: { type: string }
          description: ID of the reservation to cancel.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: 'Returns the Reservation object with status updated to cancelled. If the request is made after the free-cancellation window or after the reservation is confirmed, the cancellation may incur a fee (reflected in reservation_fee). Raises an error if the reservation is already completed, failed, or expired.'
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/reservation'
        '400':
          description: >
            Cancellation not allowed (for example, reservation already completed
            or outside cancellation window with non-refundable policy).
          content:
            application/json:
              schema: { $ref: '#/components/schemas/error' }
        '404':
          description: Reservation not found.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/error' }
        default:
          description: Error response.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/error' }
  /reservations/{reservation}/confirm:
    post:
      summary: Confirm a reservation
      operationId: postReservationsReservationConfirm
      description: >
        Attempts to finalize a pending reservation intent by assigning an
        available charging station and locking a compatible connector.  
        The call is idempotent: repeated requests for the same reservation
        return the same result.
      parameters:
        - name: reservation
          in: path
          required: true
          schema: { type: string }
          description: ID of the reservation to confirm.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                payment_method:
                  type: string
                  description: >
                    (Optional) Override the reservation’s stored
                    `payment_method` before confirmation.
            example:
              payment_method: "pm_12345"
      responses:
        '200':
          description: >
            Returns the Reservation object with status updated to confirmed (and confirmed_at, charging_station, reserved_start, reserved_end populated) if a compatible connector can be locked.
            If no connector is available in the requested window, the reservation’s status becomes failed and failed_reason explains why.
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/reservation'
        '400':
          description: Reservation can’t be confirmed (for example, already confirmed or cancelled).
          content:
            application/json:
              schema: { $ref: '#/components/schemas/error' }
        '404':
          description: Reservation not found.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/error' }
        default:
          description: Error response.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/error' }
  /webhook_endpoints:
    get:
      summary: List all webhook subscriptions
      operationId: getWebhookEndpoints
      description: >
        Returns a paginated list of your webhook endpoints, sorted by creation
        date with the most recently created endpoints first.
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Maximum number of endpoints to return (default 10).
        - in: query
          name: starting_after
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns items after this endpoint ID.
        - in: query
          name: ending_before
          required: false
          schema:
            type: string
          description: Cursor for pagination; returns items before this endpoint ID.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies related objects to expand in each endpoint (for example,
            `expand[]=application`).
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: A dictionary with a data property that contains an array of up to limit Webhook Endpoint objects, starting after Endpoint starting_after. Each entry in data is a separate Webhook Endpoint object. If no additional endpoints are available, the array is empty.
          content:
            application/json:
              schema:
                type: object
                properties:
                  object:
                    type: string
                    enum: [list]
                    description: Always `list`.
                  url:
                    type: string
                    description: Endpoint URL for this list.
                  has_more:
                    type: boolean
                    description: True if additional pages are available.
                  data:
                    type: array
                    description: Array of Webhook Endpoint objects.
                    items:
                      $ref: '#/components/schemas/webhook_endpoint'
                required: [object, url, has_more, data]
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      summary: Create webhook subscriptions
      operationId: postWebhookEndpoints
      description: >
        Registers a new webhook endpoint so your application can receive
        real-time events (such as `charge.succeeded`). You must provide the
        public URL Charge should call and the list of events you want to
        subscribe to.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                url:
                  type: string
                  format: uri
                  description: Public HTTPS URL that will receive webhook POSTs.
                enabled_events:
                  type: array
                  minItems: 1
                  items:
                    type: string
                  description: >
                    List of event types to subscribe to
                    (for example, `"charge.succeeded"`).
                description:
                  type: string
                  description: Optional description for your own reference.
                api_version:
                  type: string
                  description: >
                    Override the default API version for this endpoint.
              required:
                - url
                - enabled_events
      responses:
        '200':
          description: Returns the newly created Webhook Endpoint object, including a secret property used to sign events.
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/webhook_endpoint'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /webhook_endpoints/{webhook_endpoint}:
    delete:
      summary: Delete a webhook subscription
      operationId: deleteWebhookEndpointsWebhookEndpoint
      description: >
        Permanently deletes a webhook endpoint.  
        This action can’t be undone, your application will no longer receive
        events sent to this URL.
      parameters:
        - in: path
          name: webhook_endpoint
          required: true
          schema:
            type: string
          description: ID of the webhook endpoint to delete.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: Returns the deleted Webhook Endpoint object, including a deleted property set to true.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the deleted webhook endpoint.
                  object:
                    type: string
                    enum: [webhook_endpoint]
                    description: Always `webhook_endpoint`.
                  deleted:
                    type: boolean
                    description: Always `true`.
                required: [id, object, deleted]
        '404':
          description: Webhook endpoint not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    get:
      summary: Retrieve a webhook subscription
      operationId: getWebhookEndpointsWebhookEndpoint
      description: >
        Fetches a single webhook endpoint by its unique ID.  
        The response includes the endpoint URL, list of enabled events, secret,
        and current delivery status.
      parameters:
        - in: path
          name: webhook_endpoint
          required: true
          schema:
            type: string
          description: ID of the webhook endpoint to retrieve.
        - in: query
          name: expand
          style: form
          explode: true
          required: false
          schema:
            type: array
            items:
              type: string
          description: >
            Specifies related objects to expand in the response.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: Webhook endpoint successfully retrieved.
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/webhook_endpoint'
        '404':
          description: Webhook endpoint not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      summary: Update a webhook subscription
      operationId: postWebhookEndpointsWebhookEndpoint
      description: >
        Updates the specified webhook endpoint with the parameters you provide.
        Any parameters not included in the request remain unchanged.
      parameters:
        - in: path
          name: webhook_endpoint
          required: true
          schema:
            type: string
          description: ID of the webhook endpoint to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                description:
                  type: string
                  description: New description for the endpoint.
                enabled_events:
                  type: array
                  minItems: 1
                  items:
                    type: string
                  description: >
                    Full list of event types to subscribe to. Passing an empty
                    array clears all events.
                status:
                  type: string
                  enum: [enabled, disabled]
                  description: Enable or disable delivery of events.
              example:
                description: "My production webhooks"
      responses:
        '200':
          description: Returns the updated Webhook Endpoint object. Raises an error if the webhook ID is invalid.
          content:
            application/json:
              schema:
                description: ''
                $ref: '#/components/schemas/webhook_endpoint'
        '404':
          description: Webhook endpoint not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'